generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String     @id @default(uuid())
  name      String
  email     String     @unique
  password  String
  role      UserRole   @default(STUDENT)
  status    UserStatus @default(ACTIVE)
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt

  // Relations
  instructorAssignments Assignment[]   @relation("InstructorAssignments")
  submissions           Submission[]
  notifications         Notification[]

  @@map("Users")
}

model Assignment {
  id           String   @id @default(uuid())
  title        String
  description  String   @db.Text
  deadline     DateTime
  instructorId String
  isActive     Boolean  @default(true)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  // Relations
  instructor    User           @relation("InstructorAssignments", fields: [instructorId], references: [id], onDelete: Cascade)
  submissions   Submission[]
  notifications Notification[]

  @@map("Assignments")
}

model Submission {
  id            String           @id @default(uuid())
  assignmentId  String
  studentId     String
  submissionUrl String           @db.Text
  note          String?          @db.Text
  status        SubmissionStatus @default(PENDING)
  feedback      String?          @db.Text
  submittedAt   DateTime         @default(now())
  createdAt     DateTime         @default(now())
  updatedAt     DateTime         @updatedAt

  // Relations
  assignment    Assignment     @relation(fields: [assignmentId], references: [id], onDelete: Cascade)
  student       User           @relation(fields: [studentId], references: [id], onDelete: Cascade)
  notifications Notification[]

  // Composite unique constraint to prevent duplicate submissions
  @@unique([assignmentId, studentId])
  @@map("Submissions")
}

model Notification {
  id           String           @id @default(uuid())
  userId       String
  title        String
  message      String           @db.Text
  type         NotificationType
  isRead       Boolean          @default(false)
  assignmentId String?
  submissionId String?
  createdAt    DateTime         @default(now())
  updatedAt    DateTime         @updatedAt

  // Relations
  user       User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  assignment Assignment? @relation(fields: [assignmentId], references: [id], onDelete: Cascade)
  submission Submission? @relation(fields: [submissionId], references: [id], onDelete: Cascade)

  @@map("Notifications")
}

enum SubmissionStatus {
  PENDING
  ACCEPTED
  REJECTED
}

enum UserRole {
  INSTRUCTOR
  STUDENT
}

enum UserStatus {
  ACTIVE
  INACTIVE
  BLOCKED
}

enum NotificationType {
  NEW_ASSIGNMENT
  ASSIGNMENT_UPDATED
  NEW_SUBMISSION
  ASSIGNMENT_GRADED
  ASSIGNMENT_FEEDBACK
  DEADLINE_REMINDER
  GENERAL
}
